"""
Data migration transferring data from IngredientNutrient to
IntermediateIngredientNutrient.
"""

# Generated by Django 4.1.4 on 2023-04-17 12:12

from django.db import migrations
from django.db.models import Sum


def create_intermediate_nutrients(apps, _):
    """
    Create and save intermediate nutrient entries for important
    nutrients.
    """
    intermediate_nutrient_data = [
        {"name": "Protein", "unit": "G"},
        {"name": "Lipid", "unit": "G"},
        {"name": "Carbohydrate", "unit": "G"},
        {"name": "Ash", "unit": "G"},
        {"name": "Fiber", "unit": "G"},
        {"name": "Energy", "unit": "KCAL"},
        {"name": "Water", "unit": "G"},
        {"name": "Arsenic", "unit": "UG"},
        {"name": "Boron", "unit": "MG"},
        {"name": "Calcium", "unit": "MG"},
        {"name": "Chlorine", "unit": "G"},
        {"name": "Chromium", "unit": "UG"},
        {"name": "Fluoride", "unit": "MG"},
        {"name": "Iodine", "unit": "UG"},
        {"name": "Iron", "unit": "MG"},
        {"name": "Magnesium", "unit": "MG"},
        {"name": "Manganese", "unit": "MG"},
        {"name": "Molybdenum", "unit": "UG"},
        {"name": "Nickel", "unit": "MG"},
        {"name": "Phosphorus", "unit": "MG"},
        {"name": "Potassium", "unit": "G"},
        {"name": "Selenium", "unit": "UG"},
        {"name": "Silicon", "unit": "UG"},
        {"name": "Sodium", "unit": "G"},
        {"name": "Vanadium", "unit": "MG"},
        {"name": "Zinc", "unit": "MG"},
        {"name": "Vitamin B1", "unit": "MG"},
        {"name": "Vitamin B2", "unit": "MG"},
        {"name": "Vitamin B3", "unit": "MG"},
        {"name": "Vitamin B5", "unit": "MG"},
        {"name": "Vitamin B6", "unit": "MG"},
        {"name": "Vitamin B9", "unit": "UG"},
        {"name": "Vitamin B12", "unit": "UG"},
        {"name": "Vitamin A", "unit": "UG"},
        {"name": "Vitamin C", "unit": "MG"},
        {"name": "Vitamin D", "unit": "UG"},
        {"name": "Vitamin D2", "unit": "UG"},
        {"name": "Vitamin D3", "unit": "UG"},
        {"name": "Vitamin E", "unit": "MG"},
        {"name": "Vitamin K", "unit": "UG"},
        {"name": "Alanine", "unit": "MG"},
        {"name": "Arginine", "unit": "MG"},
        {"name": "Aspartic acid", "unit": "MG"},
        {"name": "Asparagine", "unit": "MG"},
        {"name": "Cysteine", "unit": "MG"},
        {"name": "Glutamic acid", "unit": "MG"},
        {"name": "Glutamine", "unit": "MG"},
        {"name": "Glycine", "unit": "MG"},
        {"name": "Histidine", "unit": "MG"},
        {"name": "Isoleucine", "unit": "MG"},
        {"name": "Leucine", "unit": "MG"},
        {"name": "Lysine", "unit": "MG"},
        {"name": "Methionine", "unit": "MG"},
        {"name": "Phenylalanine", "unit": "MG"},
        {"name": "Proline", "unit": "MG"},
        {"name": "Serine", "unit": "MG"},
        {"name": "Threonine", "unit": "MG"},
        {"name": "Tryptophan", "unit": "MG"},
        {"name": "Tyrosine", "unit": "MG"},
        {"name": "Valine", "unit": "MG"},
        {"name": "Saturated fatty acids", "unit": "G"},
        {"name": "Monounsaturated fatty acids", "unit": "G"},
        {"name": "Polyunsaturated fatty acids", "unit": "G"},
        {"name": "Trans fatty acid", "unit": "G"},
        {"name": "Cholesterol", "unit": "MG"},
        {"name": "Sugars", "unit": "G"},
    ]
    IntermediateNutrient = apps.get_model("main", "IntermediateNutrient")
    instances = [IntermediateNutrient(**data) for data in intermediate_nutrient_data]
    IntermediateNutrient.objects.bulk_create(instances)


def delete_intermediate_nutrients(apps, _):
    """
    Delete intermediate nutrient entries added by
    create_intermediate_nutrients.
    """
    names = [
        "Alanine",
        "Arginine",
        "Arsenic",
        "Ash",
        "Asparagine",
        "Aspartic acid",
        "Boron",
        "Calcium",
        "Carbohydrate",
        "Chlorine",
        "Chromium",
        "Cysteine",
        "Energy",
        "Fiber",
        "Fluoride",
        "Glutamic acid",
        "Glutamine",
        "Glycine",
        "Histidine",
        "Iodine",
        "Iron",
        "Isoleucine",
        "Leucine",
        "Lipid",
        "Lysine",
        "Magnesium",
        "Manganese",
        "Methionine",
        "Molybdenum",
        "Monounsaturated fatty acids",
        "Nickel",
        "Phenylalanine",
        "Phosphorus",
        "Polyunsaturated fatty acids",
        "Potassium",
        "Proline",
        "Protein",
        "Saturated fatty acids",
        "Selenium",
        "Serine",
        "Silicon",
        "Sodium",
        "Threonine",
        "Trans fatty acid",
        "Tryptophan",
        "Tyrosine",
        "Valine",
        "Vanadium",
        "Vitamin A",
        "Vitamin B1",
        "Vitamin B12",
        "Vitamin B2",
        "Vitamin B3",
        "Vitamin B5",
        "Vitamin B6",
        "Vitamin B9",
        "Vitamin C",
        "Vitamin D",
        "Vitamin D2",
        "Vitamin D3",
        "Vitamin E",
        "Vitamin K",
        "Water",
        "Zinc",
        "Cholesterol",
        "Sugars",
    ]
    IntermediateNutrient = apps.get_model("main", "IntermediateNutrient")
    IntermediateNutrient.objects.filter(name__in=names).delete()


def associate_nutrients(apps, _):
    """
    Assign nutrients' internal_nutrient attribute to their respective
    IntermediateNutrient.
    """
    IntermediateNutrient = apps.get_model("main", "IntermediateNutrient")
    Nutrient = apps.get_model("main", "Nutrient")

    # Mapping Nutrient.external_id to IntermediateNutrient.name
    nutrient_2_internal = {
        1003: "Protein",
        1004: "Lipid",
        1005: "Carbohydrate",
        1007: "Ash",
        1008: "Energy",
        1051: "Water",
        1079: "Fiber",
        1087: "Calcium",
        1088: "Chlorine",
        1089: "Iron",
        1090: "Magnesium",
        1091: "Phosphorus",
        1092: "Potassium",
        1093: "Sodium",
        1095: "Zinc",
        1096: "Chromium",
        1099: "Fluoride",
        1100: "Iodine",
        1101: "Manganese",
        1102: "Molybdenum",
        1103: "Selenium",
        1104: "Vitamin A",
        1106: "Vitamin A",
        1109: "Vitamin E",
        1110: "Vitamin D",
        1111: "Vitamin D2",
        1112: "Vitamin D3",
        1114: "Vitamin D",
        1134: "Arsenic",
        1137: "Boron",
        1146: "Nickel",
        1150: "Silicon",
        1155: "Vanadium",
        1162: "Vitamin C",
        1165: "Vitamin B1",
        1166: "Vitamin B2",
        1167: "Vitamin B3",
        1170: "Vitamin B5",
        1175: "Vitamin B6",
        1177: "Vitamin B9",
        1178: "Vitamin B12",
        1183: "Vitamin K",
        1184: "Vitamin K",
        1185: "Vitamin K",
        1190: "Vitamin B9",
        1210: "Tryptophan",
        1211: "Threonine",
        1212: "Isoleucine",
        1213: "Leucine",
        1214: "Lysine",
        1215: "Methionine",
        1216: "Cysteine",
        1217: "Phenylalanine",
        1218: "Tyrosine",
        1219: "Valine",
        1220: "Arginine",
        1221: "Histidine",
        1222: "Alanine",
        1223: "Aspartic acid",
        1224: "Glutamic acid",
        1225: "Glycine",
        1226: "Proline",
        1227: "Serine",
        1231: "Asparagine",
        1232: "Cysteine",
        1233: "Glutamine",
        1253: "Cholesterol",
        1257: "Trans fatty acid",
        1258: "Saturated fatty acids",
        1292: "Monounsaturated fatty acids",
        1293: "Polyunsaturated fatty acids",
        2000: "Sugars",
    }

    intermediates = {entry.name: entry for entry in IntermediateNutrient.objects.all()}
    nutrients = Nutrient.objects.filter(external_id__in=nutrient_2_internal.keys())

    for instance in nutrients:
        intermediate = intermediates[nutrient_2_internal[instance.external_id]]
        instance.internal_nutrient = intermediate

    Nutrient.objects.bulk_update(nutrients, ["internal_nutrient"])


def dissociate_nutrients(apps, _):
    """Remove relations created by associate_nutrients()."""
    ids = [
        1003,
        1004,
        1005,
        1007,
        1008,
        1051,
        1079,
        1087,
        1088,
        1089,
        1090,
        1091,
        1092,
        1093,
        1095,
        1096,
        1099,
        1100,
        1101,
        1102,
        1103,
        1104,
        1106,
        1109,
        1110,
        1111,
        1112,
        1114,
        1134,
        1137,
        1146,
        1150,
        1155,
        1162,
        1165,
        1166,
        1167,
        1170,
        1175,
        1177,
        1178,
        1183,
        1184,
        1185,
        1190,
        1210,
        1211,
        1212,
        1213,
        1214,
        1215,
        1216,
        1217,
        1218,
        1219,
        1220,
        1221,
        1222,
        1223,
        1224,
        1225,
        1226,
        1227,
        1231,
        1232,
        1233,
        1253,
        1257,
        1258,
        1292,
        1293,
        2000,
    ]
    Nutrient = apps.get_model("main", "Nutrient")
    Nutrient.objects.filter(external_id__in=ids).update(internal_nutrient=None)


def transfer_nutrient_data(apps, _):
    """
    Transfers data about each ingredient's nutrient amount data
    from using the old nutrient model to the new one.
    """
    Nutrient = apps.get_model("main", "Nutrient")
    IngredientNutrient = apps.get_model("main", "IngredientNutrient")
    IntermediateNutrient = apps.get_model("main", "IntermediateNutrient")
    IIN = apps.get_model("main", "IntermediateIngredientNutrient")

    # NOTE: These nutrients need to be treated differently
    #   - (I assume) Cysteine is conflated with cystine in the fdc data.
    #   - Vitamin A and Vitamin D can have entries in either or both IU
    #     and micrograms.
    #   - Vitamin B9 (Folate) has entries as total or equivalents (DFE).
    #   - Vitamin K has entries that are different molecules and need
    #     to be summed up.

    nutrient_exceptions = [
        "Cysteine",
        "Vitamin A",
        "Vitamin B9",
        "Vitamin D",
        "Vitamin K",
    ]
    nutrient_list = Nutrient.objects.exclude(internal_nutrient__isnull=True).exclude(
        internal_nutrient__name__in=nutrient_exceptions
    )
    relations = []
    for nutrient in nutrient_list:
        # Grab ingredients and amounts for selected relations, convert
        # units and add nutrient id information.
        values = nutrient.ingredientnutrient_set.values("ingredient_id", "amount")
        nutrient_id = nutrient.internal_nutrient_id
        for v in values:
            amount = v["amount"] * get_conversion_factor(nutrient)
            v.update({"amount": amount, "nutrient_id": nutrient_id})

        # Create IntermediateIngredientNutrient instances.
        relations.extend([IIN(**v) for v in values])

    # Exceptions for vitamins A, D and B9, and cysteine are handled
    # by get_relations_for_pairs() defined below.
    relations.extend(
        get_relations_for_pairs("Vitamin A, RAE", "Vitamin A, IU", Nutrient, IIN)
    )
    relations.extend(
        get_relations_for_pairs(
            "Vitamin D (D2 + D3)",
            "Vitamin D (D2 + D3), International Units",
            Nutrient,
            IIN,
        )
    )
    relations.extend(
        get_relations_for_pairs("Folate, total", "Folate, DFE", Nutrient, IIN)
    )
    relations.extend(get_relations_for_pairs("Cysteine", "Cystine", Nutrient, IIN))

    # Vitamin K summation
    vit_k = IntermediateNutrient.objects.filter(name="Vitamin K").first()
    if vit_k is not None:
        nutrients = vit_k.nutrient_set.all()
        # Assumes units are the same for simplicity.
        for n in nutrients:
            assert vit_k.unit == n.unit

        # Grab all related ingredient nutrients and sum them by ingredient.
        ing_nuts = IngredientNutrient.objects.filter(nutrient__in=nutrients)
        values = ing_nuts.values("ingredient_id").annotate(amount=Sum("amount"))

        # Add nutrient id information.
        for v in values:
            v["nutrient_id"] = vit_k.id

        # Create IntermediateIngredientNutrient instances.
        relations.extend([IIN(**v) for v in values])

    # Save IntermediateIngredientNutrient instances to the database.
    IIN.objects.bulk_create(relations)


def get_relations_for_pairs(primary_name, secondary_name, nutrient_model, iin_model):
    """
    Create intermediate relation instances for two competing nutrients.

    Creates (without saving) instances of IntermediateIngredientNutrient
    for a pair of two nutrient records with the same internal nutrient
    prioritizing the nutrient indicated by `primary_name`. Unit
    conversions are applied automatically.

    Parameters
    ----------

    primary_name
        Name of the primary nutrient.
    secondary_name
        Name of the secondary nutrient.
    nutrient_model
        Model to use as the Nutrient.
    iin_model
        Model to use as the IntermediateIngredientNutrient

    Returns
    -------
    list
        IntermediateIngredientNutrient instances created for the two
        nutrients.
    """
    Nutrient = nutrient_model
    IIN = iin_model
    result = []
    nutrient_id = None
    primary_nutrient = (
        Nutrient.objects.select_related("internal_nutrient")
        .filter(name=primary_name)
        .first()
    )

    # Creating intermediates without changes in data for the primary
    # nutrient.
    if primary_nutrient is not None:
        nutrient_id = primary_nutrient.internal_nutrient.id

        # Grab ingredients and amounts for selected relations, convert
        # units and add nutrient id information.
        values = primary_nutrient.ingredientnutrient_set.values(
            "ingredient_id", "amount"
        )
        for v in values:
            amount = v["amount"] * get_conversion_factor(primary_nutrient)
            v.update({"nutrient_id": nutrient_id, "amount": amount})

        # Create IntermediateIngredientNutrient instances.
        result.extend([IIN(**v) for v in values])

    # Intermediates for secondary nutrient.
    secondary_nutrient = Nutrient.objects.filter(name=secondary_name).first()
    if secondary_nutrient is not None:
        secondary_ingredients = secondary_nutrient.ingredientnutrient_set.all()

        if primary_nutrient is None:
            nutrient_id = secondary_nutrient.internal_nutrient_id
        else:
            # Find ingredients where a relation exists with the
            # secondary nutrient but not with the primary.
            primary_ingredients = primary_nutrient.ingredientnutrient_set.all()
            diff = secondary_ingredients.values_list("ingredient").difference(
                primary_ingredients.values_list("ingredient")
            )
            secondary_ingredients = secondary_ingredients.filter(
                ingredient__in=list(*zip(*diff))
            )

        # Grab ingredients and amounts for selected relations, convert
        # units and add nutrient id information.
        values = secondary_ingredients.values("ingredient_id", "amount")
        for v in values:
            amount = v["amount"] * get_conversion_factor(secondary_nutrient)
            v.update({"nutrient_id": nutrient_id, "amount": amount})

        # Create IntermediateIngredientNutrient instances.
        result.extend([IIN(**v) for v in values])

    return result


def get_conversion_factor(nutrient):
    """
    Get the factor needed to convert the unit of the nutrient to the
    unit of the nutrients `internal nutrient's` unit.
    """
    from_unit = nutrient.unit
    to_unit = nutrient.internal_nutrient.unit

    # skip if units are the same
    if from_unit == to_unit:
        return 1.0

    # 1 of the unit denoted by the `key` == `value` of grams
    gram_conversion_factors = {
        "UG": 1e-6,
        "MG": 0.001,
        "G": 1,
        "IU": {"Vitamin A": 0.3 * 1e-6, "Vitamin D": 0.025 * 1e-6},
    }

    # From nutrient's unit to grams
    if from_unit == "IU":
        f2g = gram_conversion_factors["IU"].get(nutrient.internal_nutrient.name)
    else:
        f2g = gram_conversion_factors.get(from_unit)
    if f2g is None:
        raise ValueError(f"{nutrient}'s unit {from_unit} was not recognized.")

    # From grams to target unit
    if to_unit == "IU":
        g2t = gram_conversion_factors["IU"].get(nutrient.internal_nutrient.name)
    else:
        g2t = gram_conversion_factors.get(to_unit)
    if g2t is None:
        raise ValueError(
            f"{nutrient.internal_nutrient}'s unit {to_unit} was not recognized."
        )

    return f2g / g2t


def delete_transferred_nutrient_data(apps, _):
    """
    Delete IntermediateIngredientNutrient entries created by
    transfer_nutrient_data().
    """
    names = [
        "Alanine",
        "Arginine",
        "Arsenic",
        "Ash",
        "Asparagine",
        "Aspartic acid",
        "Boron",
        "Calcium",
        "Carbohydrate",
        "Chlorine",
        "Chromium",
        "Cysteine",
        "Energy",
        "Fiber",
        "Fluoride",
        "Glutamic acid",
        "Glutamine",
        "Glycine",
        "Histidine",
        "Iodine",
        "Iron",
        "Isoleucine",
        "Leucine",
        "Lipid",
        "Lysine",
        "Magnesium",
        "Manganese",
        "Methionine",
        "Molybdenum",
        "Monounsaturated fatty acids",
        "Nickel",
        "Phenylalanine",
        "Phosphorus",
        "Polyunsaturated fatty acids",
        "Potassium",
        "Proline",
        "Protein",
        "Saturated fatty acids",
        "Selenium",
        "Serine",
        "Silicon",
        "Sodium",
        "Threonine",
        "Trans fatty acid",
        "Tryptophan",
        "Tyrosine",
        "Valine",
        "Vanadium",
        "Vitamin A",
        "Vitamin B1",
        "Vitamin B12",
        "Vitamin B2",
        "Vitamin B3",
        "Vitamin B5",
        "Vitamin B6",
        "Vitamin B9",
        "Vitamin C",
        "Vitamin D",
        "Vitamin D2",
        "Vitamin D3",
        "Vitamin E",
        "Vitamin K",
        "Water",
        "Zinc",
        "Cholesterol",
        "Sugars",
    ]
    IIN = apps.get_model("main", "IntermediateIngredientNutrient")
    IntermediateNutrient = apps.get_model("main", "IntermediateNutrient")

    ids = IntermediateNutrient.objects.filter(name__in=names).values_list("id")
    IIN.objects.filter(nutrient_id__in=tuple(*zip(*ids))).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("main", "0026_intermediatenutrient_unit"),
    ]

    operations = [
        migrations.RunPython(
            create_intermediate_nutrients, delete_intermediate_nutrients
        ),
        migrations.RunPython(associate_nutrients, dissociate_nutrients),
        migrations.RunPython(transfer_nutrient_data, delete_transferred_nutrient_data),
    ]
