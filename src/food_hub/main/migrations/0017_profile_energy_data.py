"""
Migration ensuring that old profile records have calculated
energy requirement saved in the database.
"""
# Generated by Django 4.1.4 on 2023-03-29 11:35

from django.db import migrations

# The _EER_COEFFS dict and calculate energy are copied directly from
# the Profile class because model methods are not supported in
# migrations and the method might be changed in the future.
_EER_COEFFS = {
    "infant": dict(
        start_const=0.0,
        age_c=0.0,
        weight_c=89.0,
        height_c=0.0,
        pa_coeffs={"S": 1.0, "LA": 1.0, "A": 1.0, "VA": 1.0},
    ),
    "non-adult_M": dict(
        start_const=88.5,
        age_c=61.9,
        weight_c=26.7,
        height_c=903,
        pa_coeffs={"S": 1.0, "LA": 1.13, "A": 1.26, "VA": 1.42},
    ),
    "non-adult_F": dict(
        start_const=135.3,
        age_c=30.8,
        weight_c=10.0,
        height_c=934,
        pa_coeffs={"S": 1.0, "LA": 1.16, "A": 1.31, "VA": 1.56},
    ),
    "adult_M": dict(
        start_const=662.0,
        age_c=9.53,
        weight_c=15.91,
        height_c=539.6,
        pa_coeffs={"S": 1.0, "LA": 1.11, "A": 1.25, "VA": 1.48},
    ),
    "adult_F": dict(
        start_const=354,
        age_c=6.91,
        weight_c=9.36,
        height_c=726,
        pa_coeffs={"S": 1.0, "LA": 1.12, "A": 1.27, "VA": 1.45},
    ),
}


def calculate_energy(profile):
    """Calculate Estimated Energy Requirement for a given profile.

    The final result is rounded to the closest integer and is given
    in kcal/day.

    Parameters
    ----------
    profile: main.models.Profile

    Returns
    -------
    int
    """
    # Coefficients and constants
    # Non-adults
    if profile.age < 19:
        # Young children and infants (less than 3yrs old)
        if profile.age < 3:
            coeffs = _EER_COEFFS["infant"]
            # This is more granular - in ages [0, 3) the end
            # constant values change every 6 months
            if profile.age < 1:
                coeffs["end_const"] = -100 + 22
            else:
                coeffs["end_const"] = -100 + 20
        # 3 - 18 yrs old
        else:
            # Boys
            if profile.sex == "M":
                coeffs = _EER_COEFFS["non-adult_M"]
            # Girls
            else:
                coeffs = _EER_COEFFS["non-adult_F"]

            if profile.age < 9:
                coeffs["end_const"] = 20
            else:
                coeffs["end_const"] = 25
    # Adults
    else:
        # Men
        if profile.sex == "M":
            coeffs = _EER_COEFFS["adult_M"]
        # Women
        else:
            coeffs = _EER_COEFFS["adult_F"]

    start_const = coeffs.get("start_const", 0.0)
    end_const = coeffs.get("end_const", 0.0)
    age_c = coeffs.get("age_c", 0.0)
    weight_c = coeffs.get("weight_c", 0.0)
    height_c = coeffs.get("height_c", 0.0)
    PA = coeffs["pa_coeffs"][profile.activity_level]

    # Equation
    result = (
        start_const
        - (age_c * profile.age)
        + PA * (weight_c * profile.weight + height_c * profile.height / 100)
        + end_const
    )

    return round(result)


def update_energy_requirements(apps, _):
    Profile = apps.get_model("main", "Profile")
    profiles = Profile.objects.all()
    for profile in profiles:
        profile.energy_requirement = calculate_energy(profile)
    Profile.objects.bulk_update(profiles, ["energy_requirement"])


class Migration(migrations.Migration):

    dependencies = [
        ("main", "0016_profile_energy_requirement_profile_weight_and_more"),
    ]

    operations = [
        migrations.RunPython(update_energy_requirements),
    ]
